# main.py
# --- –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –¥–ª—è —Ñ–ª–æ—É ¬´NANO BANANA¬ª + Mini App (WebApp) ---
# –§—É–Ω–∫—Ü–∏–∏:
# 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ—ë —Ñ–æ—Ç–æ
# 2) –í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä (–±–µ–ª–∞—è/—á—ë—Ä–Ω–∞—è/–ª–∏–ª–æ–≤–∞—è —Å—É–º–∫–∞) ‚Äî —á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫–∏ –ò–õ–ò —á–µ—Ä–µ–∑ Mini App
# 3) –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤–Ω–µ—à–Ω–∏–π —Ñ–ª–æ—É (HTTP API)
# 4) –ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
# - Python 3.10+
# - aiogram==3.*
# - httpx==0.27.*
# - python-dotenv (–æ–ø—Ü.)
#
# –ó–∞–ø—É—Å–∫:
#   export BOT_TOKEN=xxxxxxxxxxxxxxxx
#   export FLOW_API_URL=https://example.com/generate
#   export FLOW_API_KEY=your_key
#   # (–æ–ø—Ü.) URL —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–≥–æ Mini App
#   export WEBAPP_URL=https://your-domain.tld/nano-banana-webapp/
#   python main.py

import asyncio
import logging
import os
from enum import Enum
from typing import Optional

import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    URLInputFile,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

# ---------------------- –ö–æ–Ω—Ñ–∏–≥ ----------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN")
FLOW_API_URL = os.environ.get("FLOW_API_URL", "https://example.com/generate")
FLOW_API_KEY = os.environ.get("FLOW_API_KEY", "")
WEBAPP_URL = os.environ.get("WEBAPP_URL")  # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É Mini App

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
logger = logging.getLogger("nano-banana-bot")

# ---------------------- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ----------------------
class BagColor(str, Enum):
    WHITE = "white"
    BLACK = "black"
    LILAC = "lilac"  # –ª–∏–ª–æ–≤–∞—è

COLOR_LABELS = {
    BagColor.WHITE: "–ë–µ–ª–∞—è —Å—É–º–∫–∞",
    BagColor.BLACK: "–ß—ë—Ä–Ω–∞—è —Å—É–º–∫–∞",
    BagColor.LILAC: "–õ–∏–ª–æ–≤–∞—è —Å—É–º–∫–∞",
}

class GenStates(StatesGroup):
    waiting_photo = State()
    waiting_color = State()  # –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ inline‚Äë–∫–Ω–æ–ø–∫–∏ –ò–õ–ò —á–µ—Ä–µ–∑ WebApp

# ---------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------------

def color_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=COLOR_LABELS[BagColor.WHITE], callback_data=f"color:{BagColor.WHITE}")],
        [InlineKeyboardButton(text=COLOR_LABELS[BagColor.BLACK], callback_data=f"color:{BagColor.BLACK}")],
        [InlineKeyboardButton(text=COLOR_LABELS[BagColor.LILAC], callback_data=f"color:{BagColor.LILAC}")],
    ])


def start_keyboard() -> Optional[ReplyKeyboardMarkup]:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω WEBAPP_URL."""
    if not WEBAPP_URL:
        return None
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–ò–ª–∏ –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –Ω–∏–∂–µ",
    )

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------
async def download_telegram_file(bot: Bot, file_id: str) -> bytes:
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ file_id –∏ –≤–µ—Ä–Ω—É—Ç—å –±–∞–π—Ç—ã."""
    file = await bot.get_file(file_id)
    file_bytes = await bot.download_file(file.file_path)
    return file_bytes.read()

async def call_flow_api(user_image_bytes: bytes, bag_color: BagColor, user_id: int) -> Optional[bytes]:
    """–í—ã–∑–æ–≤ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–ª–æ—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.

    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç multipart/form-data:
      - image: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (jpg/png)
      - color: {white|black|lilac}
      - user_id: —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (image/jpeg –∏–ª–∏ image/png) –ª–∏–±–æ JSON —Å –æ—à–∏–±–∫–æ–π.
    """
    headers = {}
    if FLOW_API_KEY:
        headers["Authorization"] = f"Bearer {FLOW_API_KEY}"

    files = {
        "image": ("user_photo.jpg", user_image_bytes, "image/jpeg"),
    }
    data = {
        "color": bag_color.value,
        "user_id": str(user_id),
    }

    timeout = httpx.Timeout(60.0, connect=15.0)

    async with httpx.AsyncClient(timeout=timeout, follow_redirects=True) as client:
        try:
            resp = await client.post(FLOW_API_URL, headers=headers, data=data, files=files)
            resp.raise_for_status()

            content_type = resp.headers.get("content-type", "")
            if "image" in content_type:
                return resp.content
            if "application/json" in content_type:
                j = resp.json()
                img_url = j.get("image_url")
                if img_url:
                    img_resp = await client.get(img_url)
                    img_resp.raise_for_status()
                    return img_resp.content
            logger.error("FLOW_API –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º: %s", content_type)
            return None
        except httpx.HTTPError as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ FLOW_API: %s", e)
            return None

# ---------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------------------
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# ---------------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------------
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    kb = start_keyboard()
    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–∞–≤–∞–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å —Å—É–º–∫–æ–π NANO BANANA.

"
        "–®–∞–≥ 1 ‚Äî –ø—Ä–∏—à–ª–∏ —Å–≤–æ—ë <b>—Ñ–æ—Ç–æ</b> (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ —Ñ–∞–π–ª–æ–º).
"
        + ("
–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å Mini App –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞." if kb else "")
    )
    await message.answer(text, reply_markup=kb or ReplyKeyboardRemove())
    await state.set_state(GenStates.waiting_photo)

@dp.message(GenStates.waiting_photo, F.photo)
async def got_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=file_id)

    kb = start_keyboard()
    await message.answer(
        "–®–∞–≥ 2 ‚Äî –≤—ã–±–µ—Ä–∏ <b>—Ü–≤–µ—Ç —Å—É–º–∫–∏</b>:
"
        "–ú–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
        reply_markup=kb or ReplyKeyboardRemove(),
    )
    await message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞:", reply_markup=color_keyboard())
    await state.set_state(GenStates.waiting_color)

@dp.message(GenStates.waiting_photo)
async def not_photo_warn(message: Message):
    await message.reply("–ú–Ω–µ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@dp.callback_query(GenStates.waiting_color, F.data.startswith("color:"))
async def choose_color(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    _, color_raw = cb.data.split(":", 1)
    try:
        color = BagColor(color_raw)
    except ValueError:
        await cb.message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    data = await state.get_data()
    file_id = data.get("photo_file_id")
    if not file_id:
        await cb.message.reply("–ù–µ –Ω–∞—à—ë–ª —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑: /start")
        await state.clear()
        return

    await cb.message.edit_text(
        f"–û–∫–µ–π, —Ü–≤–µ—Ç: <b>{COLOR_LABELS[color]}</b>.

–®–∞–≥ 3 ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ –≤–æ —Ñ–ª–æ—É‚Ä¶ ‚è≥"
    )

    try:
        photo_bytes = await download_telegram_file(cb.message.bot, file_id)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ Telegram")
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        await state.clear()
        return

    gen_bytes = await call_flow_api(photo_bytes, color, cb.from_user.id)

    if not gen_bytes:
        await cb.message.answer(
            "üòî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–ª–æ—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ —Ñ–æ—Ç–æ.
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: /start"
        )
        await state.clear()
        return

    await cb.message.answer_photo(photo=gen_bytes, caption="–ì–æ—Ç–æ–≤–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî /start")
    await state.clear()

# --- Ob—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App ---
@dp.message(GenStates.waiting_color, F.web_app_data)
async def webapp_color_handler(message: Message, state: FSMContext):
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–ü–æ–ª—É—á–∏–ª –≤—ã–±–æ—Ä –≤ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç‚Ä¶", reply_markup=ReplyKeyboardRemove())

    import json
    try:
        payload = json.loads(message.web_app_data.data)
        color = BagColor(payload.get("color", ""))
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∏–∑ Mini App. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    data = await state.get_data()
    file_id = data.get("photo_file_id")
    if not file_id:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ: /start")
        await state.clear()
        return

    try:
        photo_bytes = await download_telegram_file(message.bot, file_id)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ Telegram (Mini App flow)")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        await state.clear()
        return

    gen_bytes = await call_flow_api(photo_bytes, color, message.from_user.id)

    if not gen_bytes:
        await message.answer("üòî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–ª–æ—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ —Ñ–æ—Ç–æ. /start")
        await state.clear()
        return

    await message.answer_photo(photo=gen_bytes, caption="–ì–æ—Ç–æ–≤–æ! –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî /start")
    await state.clear()

# –§–æ–ª–ª–±–µ–∫: —Ñ–æ—Ç–æ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ –ø–æ—Ç–æ–∫
@dp.message(F.photo)
async def photo_outside_flow(message: Message, state: FSMContext):
    await state.set_state(GenStates.waiting_photo)
    await got_photo(message, state)

@dp.message()
async def fallback(message: Message):
    await message.answer("–ù–∞–∂–º–∏ /start –∏ —Å–ª–µ–¥—É–π —à–∞–≥–∞–º: 1) —Ñ–æ—Ç–æ ‚Üí 2) —Ü–≤–µ—Ç (–∫–Ω–æ–ø–∫–∏ –∏–ª–∏ Mini App) ‚Üí 3) —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

# ---------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------------
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


"""
====================
–§–ê–ô–õ: webapp/index.html (Telegram Mini App)
====================
–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞. –†–∞–∑–º–µ—Å—Ç–∏ –≥–¥–µ —É–≥–æ–¥–Ω–æ (S3/Cloudflare Pages/Netlify/Vercel/GitHub Pages) –∏ —É–∫–∞–∂–∏ URL –≤ WEBAPP_URL.

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:

<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>NANO BANANA ‚Äî Mini App</title>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  <style>
    :root { --bg:#111; --fg:#fff; --muted:#aaa; --card:#1a1a1a; }
    *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--fg);font:16px/1.4 system-ui,-apple-system,Segoe UI,Roboto}
    .wrap{max-width:520px;margin:0 auto;padding:24px}
    .card{background:var(--card);border-radius:16px;padding:20px;box-shadow:0 2px 12px rgba(0,0,0,.25)}
    h1{font-size:20px;margin:0 0 12px}
    .grid{display:grid;gap:12px}
    .opt{display:flex;align-items:center;gap:10px;padding:12px;border-radius:12px;background:#222;cursor:pointer}
    .opt input{margin:0}
    .hint{color:var(--muted);font-size:13px}
    button{width:100%;padding:14px 16px;border:0;border-radius:12px;font-weight:600;cursor:pointer}
    .primary{background:#2ea44f;color:#fff}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç —Å—É–º–∫–∏</h1>
      <div class="grid">
        <label class="opt"><input type="radio" name="color" value="white" checked><span>–ë–µ–ª–∞—è</span></label>
        <label class="opt"><input type="radio" name="color" value="black"><span>–ß—ë—Ä–Ω–∞—è</span></label>
        <label class="opt"><input type="radio" name="color" value="lilac"><span>–õ–∏–ª–æ–≤–∞—è</span></label>
      </div>
      <p class="hint">–§–æ—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç –±–æ—Ç—É, –∞ –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±–æ—Ç –Ω–∞—á–Ω—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.</p>
      <div style="height:12px"></div>
      <button class="primary" id="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä</button>
    </div>
  </div>
<script>
  const tg = window.Telegram?.WebApp;
  tg?.ready();
  document.getElementById('submit').addEventListener('click', () => {
    const val = document.querySelector('input[name="color"]:checked')?.value || 'white';
    tg?.sendData(JSON.stringify({ color: val }));
  });
</script>
</body>
</html>
"""
